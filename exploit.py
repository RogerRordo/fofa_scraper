#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Author: RogerRordo

import logging
import optparse
from colorlog import ColoredFormatter
from urllib3 import disable_warnings
from urllib3.exceptions import InsecureRequestWarning
from utils import *

HEADERS = {
    'User-Agent':
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36',
    'Accept': 'application/json, text/plain, */*'
}
LOG_LEVEL = logging.INFO
log = logging.getLogger('pythonConfig')


def main(opts):
    # Load module
    params, pocs = loadModule(opts.module)

    # Load original res.json
    absResJson = 'module/{}/{}'.format(opts.module, params.resJson)
    res = loadResJson(absResJson)

    # Disable HTTPS warnings
    disable_warnings(InsecureRequestWarning)

    # Try to exploit
    for target, content in res['targets'].items():
        res['targets'][target]['vulnerable'] = False
        for poc in pocs:
            if opts.proxy != '':
                proxies = {"http": "http://{}".format(opts.proxy)}
            else:
                proxies = None
            vulnerable, info = poc(target, proxies)
            res['targets'][target]['vulnerable'] = vulnerable
            res['targets'][target]['info'] = info
            if (vulnerable):
                break
        log.info('Target {} : vulnerable={} info={}'.format(target, vulnerable, info))

    # Export hosts
    saveResJson(res, absResJson)


def getOpts():
    parser = optparse.OptionParser()
    parser.add_option('-m', '--module', dest='module', default='', type=str, help='Module name')
    parser.add_option('-p', '--proxy', dest='proxy', default='', type=str, help='HTTP Proxy to use (default empty)')
    parser.add_option('-d',
                      '--delay',
                      default=5,
                      type=float,
                      dest='delay',
                      help='Seconds to delay between requests for each proxy (default = 5)')
    parser.add_option('-T', '--threads', default=15, type=int, dest='threads', help='Number of threads (default = 15)')
    parser.add_option('-t', '--timeout', default=6, type=float, dest='timeout', help='Seconds of Timeout (default = 6)')

    (opts, args) = parser.parse_args()
    return opts, args


def initLog():
    LOGFORMAT = "  %(log_color)s%(asctime)s  %(levelname)-8s%(reset)s | %(log_color)s%(message)s%(reset)s"

    logging.root.setLevel(LOG_LEVEL)
    formatter = ColoredFormatter(LOGFORMAT)

    stream = logging.StreamHandler()
    stream.setLevel(LOG_LEVEL)
    stream.setFormatter(formatter)

    log.setLevel(LOG_LEVEL)
    log.addHandler(stream)


if __name__ == '__main__':
    initLog()
    opts, args = getOpts()
    if opts.module == '':
        log.error('Module name required')
    else:
        main(opts)
